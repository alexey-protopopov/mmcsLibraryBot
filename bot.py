import config
import logging
import asyncio

from aiogram import Bot, Dispatcher, executor, types
from aiogram.utils.markdown import bold, code, italic, text
from aiogram.types import ParseMode

from dbManager import DbManager
from actions import Actions

bot = Bot(token=config.API_TOKEN)
dp = Dispatcher(bot)

db = DbManager('db.db')
registrationStarted = False
searchStarted = False

logging.basicConfig(level=logging.INFO, format=u'%(asctime)s - %(name)s - %(levelname)s - %(message)s')
act = Actions()


# 1)–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—ã–±–æ—Ä –∫—É—Ä—Å–∞, –≥—Ä—É–ø–ø—ã, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, —Å–µ–º–µ—Å—Ç—Ä(–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ tg)
@dp.message_handler(commands=['start'])
async def subscribe(message: types.Message):
    logging.info("/start command sent from user {0}".format(message.from_user.id))
    if not db.subscriber_exists(message.from_user.id):

        await message.answer(text(bold('–ü—Ä–∏–≤–µ—Ç!'), bold('–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ä–µ—à–∏–ª –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º –±–æ—Ç–æ–º!'), sep='\n'),
                             parse_mode=ParseMode.MARKDOWN_V2)
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞ –∏ –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É.  (x.x)")
        act.startReg()

    else:
        # –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å, —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–º—É —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        # db.update_subscription(message.from_user.id, True)
        pass


@dp.message_handler(commands=['help'])
async def showHelp(message: types.Message):
    logging.info("/help command sent from user {0}".format(message.from_user.id))
    act.reset()
    await message.answer(text("–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:", "/files ‚Äî  —É—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", "/search ‚Äî  –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é",
                              "/admin ‚Äî  —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–æ–º[TEST]",
                              "/upload ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤", "/forget ‚Äî —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                              "/info ‚Äî  –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ", sep='\n'))


@dp.message_handler(commands=['files'])
async def filesStore(message: types.Message):
    logging.info("/files command sent from user {0}".format(message.from_user.id))
    act.reset()
    # await message.answer('üìÅ')
    act.startFilesMode()
    semesters_kb = act.semestersKeyboard()
    await message.answer(text(bold("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–º–µ—Å—Ç—Ä")), reply_markup=semesters_kb, parse_mode=ParseMode.MARKDOWN_V2)

    # user_id = message.from_user.id
    # doc = open("test.pdf", 'rb')
    # msg = await bot.send_document(user_id, doc, caption='–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è!')
    # file_id = getattr(msg, 'document').file_id
    # await message.answer(file_id)


@dp.message_handler(commands=['forget'])
async def deleteSubscriber(message: types.Message):
    logging.info("/forget command sent from user {0}".format(message.from_user.id))
    act.reset()
    if db.subscriber_exists(message.from_user.id):
        db.delete_subscriber(message.from_user.id)
        await message.answer("–î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã,\n–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
    else:
        await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")


@dp.message_handler(commands=['search'])
async def search(message: types.Message):
    logging.info("/search command sent from user {0}".format(message.from_user.id))
    act.startSearch()
    await message.answer("–ß—Ç–æ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å?")


@dp.message_handler()
async def actions_handler(message: types.Message):
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not db.subscriber_exists(message.from_user.id) and act.registrationStarted:
        logging.info(
            "actions_handler()::setCourseAndGroup mode \'{0}\' command sent from user {1}"
                .format(message.text, message.from_user.id))
        userInput = message.text.split('.')
        print(userInput)
        try:
            course = int(userInput[0])
            group = int(userInput[1])
        except (ValueError, IndexError):
            course = -1
            group = -1
        if course not in range(1, 5) or (group not in range(1, 15) and (group != 45 and group != 57)):
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:\n/start")
            act.stopReg()
        else:
            db.add_subscriber(message.from_user.id, 0, course, group)
            act.stopReg()
            await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!\n –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
    # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    elif act.searchStarted:
        act.reset()
        logging.info("actions_handler()::search mode \'{0}\' command sent from user {1}"
                     .format(message.text, message.from_user.id))
        if len(message.text) < 4:
            await message.answer("–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å(–º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞).")
        else:
            dbResponse = db.search_by_name(message.text)
            results = act.generateSearchPage(dbResponse)
            await message.answer(f"–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
            await message.answer("\n".join(results))
            act.stopSearch()
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    elif message.text.startswith("/download"):
        logging.info("actions_handler()::sendFile mode \'{0}\' command sent from user {1}"
                     .format(message.text, message.from_user.id))
        try:
            user_id = message.from_user.id
            num_id = int(message.text[9:])
            file_id = db.get_file(num_id)
            await bot.send_document(user_id, file_id)
        except (ValueError, IndexError):
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    # –í—ã–≤–æ–¥ —Ñ–∞–π–ª–æ–≤/–ø–∞–ø–æ–∫ 0 —É—Ä–æ–≤–µ–Ω—å
    elif act.startFilesMode and act.filesLevel == 0 and message.text in ('1 —Å–µ–º–µ—Å—Ç—Ä', '2 —Å–µ–º–µ—Å—Ç—Ä'):
        disciplines_list = db.get_disciplines(message.from_user.id, int(message.text[0]))
        if disciplines_list:
            kb = act.generateDisciplinesKeyboard(disciplines_list)
            act.fLevelUp()
            await message.answer(text(bold("–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –ø—Ä–µ–¥–º–µ—Ç")), reply_markup=kb, parse_mode=ParseMode.MARKDOWN_V2)
        else:
            await message.answer("<–ü—É—Å—Ç–æ>")
        # –í—ã–≤–æ–¥ —Ñ–∞–π–ª–æ–≤/–ø–∞–ø–æ–∫ 1 —É—Ä–æ–≤–µ–Ω—å
    elif act.startFilesMode and act.filesLevel == 1:
        disciplines_list = db.get_disciplines(message.from_user.id, int(message.text[0]))
        if disciplines_list:
            kb = act.generateDisciplinesKeyboard(disciplines_list)
            act.fLevelUp()
            await message.answer(text(bold("–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –ø—Ä–µ–¥–º–µ—Ç")), reply_markup=kb,
                                 parse_mode=ParseMode.MARKDOWN_V2)
        else:
            await message.answer("<–ü—É—Å—Ç–æ>")

    else:
        logging.info("actions_handler():: UNKNOWN \'{0}\' command sent from user {1}"
                     .format(message.text, message.from_user.id))
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!")


# @dp.message_handler(commands=['files'])
# async def sendFile1(message: types.Message):
# await message.answer("files")
# user_id = message.from_user.id
# msg = text(bold('–Ø –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:'),
#      '/voice', '/photo', '/group', '/note', '/file, /testpre', sep='\n')
# await message.reply(msg, parse_mode=ParseMode.MARKDOWN)


# doc = open("test.pdf", 'rb')
# await bot.send_chat_action(user_id, types.ChatActions.UPLOAD_DOCUMENT)
# await asyncio.sleep(3)  # —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
# msg = await bot.send_document(user_id, doc,
# caption='–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è!')
# file_id = getattr(msg, file_attr).file_id
# print(file_id)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
